package de.medizininformatikinitiative.medgraph.searchengine.pipeline.judge;

import de.medizininformatikinitiative.medgraph.searchengine.model.ScoreIncorporationStrategy;
import de.medizininformatikinitiative.medgraph.searchengine.model.matchingobject.JudgedObject;

/**
 * Provides configuration on how to apply the result of a {@link ScoreJudge} to a {@link JudgedObject}.
 *
 * @param passingScore               The score required to "pass" the judgement or null if the judgement is always
 *                                   passed.
 * @param mayEliminateAll            If a passing score is defined and all objects are judged below that score, setting
 *                                   this to true causes them all to "survive" instead of all being eliminated, which
 *                                   would leave an empty result.
 * @param scoreWeight                The weight to apply to the score assigned by the judge. Does not affect whether
 *                                   objects can pass the {@link #passingScore}, but when the result is applied to a
 *                                   {@link JudgedObject}, the score generated by the judge is multiplied by this
 *                                   weight.
 * @param scoreIncorporationStrategy The way the weighted score is to be applied to a {@link JudgedObject}.
 * @author Markus Budeus
 */
public record ScoreJudgeConfiguration(Double passingScore, boolean mayEliminateAll, double scoreWeight,
                                      ScoreIncorporationStrategy scoreIncorporationStrategy) implements ScoreIncorporationStrategy {

	private static final boolean DEFAULT_ELIMINATE_ALL = false;
	private static final Double DEFAULT_PASSING_SCORE = null;
	private static final double DEFAULT_SCORE_WEIGHT = 1.0;
	private static final ScoreIncorporationStrategy DEFAULT_SCORE_INCORPORATION_STRATEGY = ScoreIncorporationStrategy.ADD;

	public ScoreJudgeConfiguration() {
		this(DEFAULT_PASSING_SCORE, DEFAULT_ELIMINATE_ALL, DEFAULT_SCORE_WEIGHT, DEFAULT_SCORE_INCORPORATION_STRATEGY);
	}

	public ScoreJudgeConfiguration(Double passingScore, boolean eliminateAll) {
		this(passingScore, eliminateAll, DEFAULT_SCORE_WEIGHT, DEFAULT_SCORE_INCORPORATION_STRATEGY);
	}

	public ScoreJudgeConfiguration(double scoreWeight, ScoreIncorporationStrategy scoreIncorporationStrategy) {
		this(DEFAULT_PASSING_SCORE, DEFAULT_ELIMINATE_ALL, scoreWeight, scoreIncorporationStrategy);
	}

	@Override
	public double calculateScore(double baseObjectScore, double judgementScore) {
		return scoreIncorporationStrategy.calculateScore(baseObjectScore, judgementScore * scoreWeight);
	}
}
