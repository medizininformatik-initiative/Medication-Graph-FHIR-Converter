package de.medizininformatikinitiative.medgraph.searchengine.model.matchingobject;

import de.medizininformatikinitiative.medgraph.searchengine.model.identifiable.Matchable;
import de.medizininformatikinitiative.medgraph.searchengine.pipeline.transformer.Transformation;

import java.util.Objects;

/**
 * A {@link MatchingObject} to which a transformation has been applied. This instance references the
 * {@link MatchingObject} from which it originated during the transformation as well as the corresponding
 * {@link Transformation}.
 *
 * @param <S> the type of {@link MatchingObject} which was transformed
 * @param <T> the type of this object's {@link Matchable}
 * @author Markus Budeus
 */
public class TransformedObject<S extends Matchable, T extends Matchable> extends MatchingObjectBase<T> {

	private final MatchingObject<S> source;
	private final Transformation<T> transformation;

	/**
	 * Creates a new {@link TransformedObject}.
	 * @param object the {@link Matchable} managed by this instance
	 * @param source the {@link MatchingObject} from which this instance was generated by the transformation
	 * @param transformation the {@link Transformation} which generated this instance
	 */
	public TransformedObject(T object, MatchingObject<S> source, Transformation<T> transformation) {
		super(object, source.getScore());
		this.source = source;
		this.transformation = transformation;
	}

	/**
	 * Returns the object this instance originated from via the transformation.
	 */
	public MatchingObject<S> getSource() {
		return source;
	}

	/**
	 * Returns the transformation this instance originated from.
	 */
	public Transformation<T> getTransformation() {
		return transformation;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) return true;
		if (object == null || getClass() != object.getClass()) return false;
		if (!super.equals(object)) return false;
		TransformedObject<?, ?> that = (TransformedObject<?, ?>) object;
		return Objects.equals(source, that.source) && Objects.equals(transformation,
				that.transformation);
	}

	@Override
	public int hashCode() {
		return Objects.hash(super.hashCode(), source, transformation);
	}
}
